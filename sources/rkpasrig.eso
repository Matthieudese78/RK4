      SUBROUTINE rkpasrig(omeg1,omeg2,omeg3,rot,inertie,invinert,nsb,ib,
     &                    th,fmomtot,xcoolb,fexb,nplb,ind,ifex,lxpinv)

      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)
*-----------------------------------------------------------------------*
*     equilibre dynamique rotation rigide                                                                       *
*     ifex : indice du pas de temps ou le couple est estime :
*             - 3 : a t_n --> jamais utilise sauf peut-etre pour l'initialisation?
*             - 2 : a t_n + dt/2
*             - 1 : a t_n + dt
*-----------------------------------------------------------------------*
      real*8 omeg1(3,5,nsb),omeg2(3,5,nsb),omeg3(3,5,nsb)
      real*8 rot(3,3,5,nsb),inertie(3,3,nsb),invinert(3,3,nsb)
      real*8 Fexb(nplb,3,3),fmomtot(3,5,nsb),xcoolb(3,nsb,nplb) 
      real*8 th(3),t2(3),jw(3),dexpinv(3,3)
      real*8 thbis(3),wbis(3),abis(3)
      logical lxpinv
      
        do ip=1,nplb
          fmomtot(1,ind,ib) = fmomtot(1,ind,ib) + 
     &     xcoolb(2,ib,ip)*fexb(ip,ifex,3) -
     &     xcoolb(3,ib,ip)*fexb(ip,ifex,2)
          fmomtot(2,ind,ib) = fmomtot(2,ind,ib) + 
     &     xcoolb(3,ib,ip)*fexb(ip,ifex,1) -
     &     xcoolb(1,ib,ip)*fexb(ip,ifex,3)
          fmomtot(3,ind,ib) = fmomtot(3,ind,ib) + 
     &     xcoolb(1,ib,ip)*fexb(ip,ifex,2) -
     &     xcoolb(2,ib,ip)*fexb(ip,ifex,1)
        enddo
*        calcul du terme convectif du 2nd membre : W X J W
*            JW : 
        do id=1,3
          jw(id) = 0.d0
          do j=1,3
        jw(id) = jw(id) + inertie(id,j,ib)*omeg2(j,ind,ib)
          enddo
        enddo
*            W X JW
        t2(1) = omeg2(2,ind,ib)*jw(3) - omeg2(3,ind,ib)*jw(2) 
        t2(2) = omeg2(3,ind,ib)*jw(1) - omeg2(1,ind,ib)*jw(3) 
        t2(3) = omeg2(1,ind,ib)*jw(2) - omeg2(2,ind,ib)*jw(1) 
*        calcul de l'acceleration : A = J^-1 * (-t2 + Gext)
        do id = 1,3
          omeg3(id,ind,ib) = 0.d0
          do j = 1,3
            omeg3(id,ind,ib) = omeg3(id,ind,ib) + 
     &       invinert(id,j,ib) * (-t2(j) + fmomtot(j,ind,ib))
          enddo
        enddo
*       On implemente la correction ?
        if (lxpinv) then
*          "rappatriment sur l'espace tangent en t_n :
          call xpinv(th(1),dexpinv(1,1),xang)
*         application : 
*           - au vecteur de rotation
*           - a la vitesse angulaire de rotation
*           - a l' acceleration angulaire de rotation
          do id=1,3
            thbis(id) = 0.d0
            wbis(id) = 0.d0
            abis(id) = 0.d0
            do j=1,3
              thbis(id) = thbis(id) + dexpinv(id,j) * th(j)
              wbis(id) = wbis(id) + dexpinv(id,j) * omeg2(j,ind,ib)
              abis(id) = abis(id) + dexpinv(id,j) * omeg3(j,ind,ib)
            enddo
          enddo
          do id=1,3  
           th(id) = thbis(id)
           omeg2(id,ind,ib) = wbis(id)
           omeg3(id,ind,ib) = abis(id)
          enddo
        endif

      END
