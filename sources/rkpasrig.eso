      SUBROUTINE rkpasrig(omeg1,omeg2,omeg3,rot,inertie,invinert,nsb,ib,
     &                    th,fmomtot,xcoolb,fexb,nplb,ind,ifex,
     &                    lxpinv,lmom)

      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)
*-----------------------------------------------------------------------*
*     equilibre dynamique rotation rigide                                                                       *
*     ifex : indice du pas de temps ou le couple est estime :
*             - 3 : a t_n --> jamais utilise sauf peut-etre pour l'initialisation?
*             - 2 : a t_n + dt/2
*             - 1 : a t_n + dt
*     lmom : le moment fmomtot a t il deja ete calcule?
*-----------------------------------------------------------------------*
      real*8 omeg1(3,5,nsb),omeg2(3,5,nsb),omeg3(3,5,nsb)
      real*8 rot(3,3,5,nsb),inertie(3,3,nsb),invinert(3,3,nsb)
      real*8 Fexb(nplb,3,3),fmomtot(3,5,nsb),xcoolb(3,nsb,nplb) 
      real*8 th(3),t2(3),jw(3),dexpinv(3,3)
      real*8 thbis(3),wbis(3),abis(3)
      real*8 xcoo(3),rtgex(3),fmom(3)
      logical lmom,lxpinv

*        write(*,*)'rkpasrig : ind = ',ind
*        write(*,*)'rkpasrig : rot :'
*        do id=1,3
*           write(*,'(3(1X,F8.5))') , (rot(id,j,ind,ib),j=1,3)
*        enddo
*        write(*,*)'rkpasrig : omeg2 :'
*        write(*,'(3(1X,F8.5))') , (omeg2(id,ind,ib),id=1,3)

************************************************************************
* calcul du couple exterieur :
************************************************************************
        if (lmom) then
        fmom(1) = 0.d0
        fmom(2) = 0.d0
        fmom(3) = 0.d0
        do ip=1,nplb
*         write(*,*)'rkpasrig : fexb '
*         write(*,'(3(1X,F8.5))') , (fexb(ip,ind,id),id=1,3)
*         on est obliges de calcule le moment en base B 
          do id=1,3
            xcoo(id) = 0.d0
            do j=1,3
              xcoo(id) = xcoo(id) + rot(id,j,ind,ib)*xcoolb(j,ib,ip) 
            enddo
          enddo
*         write(*,*)'rkpasrig : xcoo en base b '
*         write(*,'(3(1X,F8.5))') , (xcoo(id),id=1,3)
          fmom(1) = fmom(1) + 
     &     xcoo(2)*fexb(ip,ifex,3) -
     &     xcoo(3)*fexb(ip,ifex,2)
          fmom(2) = fmom(2) + 
     &     xcoo(3)*fexb(ip,ifex,1) -
     &     xcoo(1)*fexb(ip,ifex,3)
          fmom(3) = fmom(3) + 
     &     xcoo(1)*fexb(ip,ifex,2) -
     &     xcoo(2)*fexb(ip,ifex,1)
*         write(*,*)'rkpasrig : fmomtot en base b '
*         write(*,'(3(1X,F8.5))') , (fmomtot(id,ind,ib),id=1,3)
        enddo
*       fin if (lmom) :
        endif
*        calcul du terme convectif du 2nd membre : W X J W
*            JW : + on repasse le moment dans le body frame :
        do id=1,3
          jw(id) = 0.d0
          rtgex(id) = 0.d0
          if (lmom) then
            do j=1,3
        rtgex(id) = rtgex(id) + rot(j,id,ind,ib)*fmom(j)
        jw(id) = jw(id) + inertie(id,j,ib)*omeg2(j,ind,ib)
            enddo
          endif
          if (.not.lmom) then
            do j=1,3
        rtgex(id) = rtgex(id) + rot(j,id,ind,ib)*fmomtot(j,ind,ib)
        jw(id) = jw(id) + inertie(id,j,ib)*omeg2(j,ind,ib)
            enddo
          endif
        enddo

*         write(*,*)'rkpasrig : rtgex body frame '
*         write(*,'(3(1X,F8.5))') , (rtgex(id),id=1,3)
*            W X JW
        t2(1) = omeg2(2,ind,ib)*jw(3) - omeg2(3,ind,ib)*jw(2) 
        t2(2) = omeg2(3,ind,ib)*jw(1) - omeg2(1,ind,ib)*jw(3) 
        t2(3) = omeg2(1,ind,ib)*jw(2) - omeg2(2,ind,ib)*jw(1) 
*         write(*,*)'rkpasrig : 2nd membre eq dyn '
*         write(*,'(3(1X,F8.5))') , (t2(id),id=1,3)
*        calcul de l'acceleration : A = J^-1 * (-t2 + Gext)
        do id = 1,3
          omeg3(id,ind,ib) = 0.d0
          do j = 1,3
            omeg3(id,ind,ib) = omeg3(id,ind,ib) + 
     &       invinert(id,j,ib) * (-t2(j) + rtgex(id))
          enddo
        enddo
*       On implemente la correction ?
        if (lxpinv) then
*          "rappatriment sur l'espace tangent en t_n :
          call xpinv(th(1),dexpinv(1,1),xang)
*         application : 
*           - a la vitesse angulaire de rotation
*           - a l' acceleration angulaire de rotation
*          write(*,*)'           omeg2 = '
*          write(*,'(3(1X,F8.5))') , (omeg2(j,ind,ib),j=1,3)
*          write(*,*)'           omeg3 = '
*          write(*,'(3(1X,F8.5))') , (omeg3(j,ind,ib),j=1,3)
          do id=1,3
            wbis(id) = 0.d0
            abis(id) = 0.d0
            do j=1,3
              wbis(id) = wbis(id) + dexpinv(id,j) * omeg2(j,ind,ib)
              abis(id) = abis(id) + dexpinv(id,j) * omeg3(j,ind,ib)
            enddo
          enddo
          do id=1,3  
           omeg2(id,ind,ib) = wbis(id)
           omeg3(id,ind,ib) = abis(id)
          enddo
*          write(*,*)'rkpasrig : apres dexpinv :'
*          write(*,'(3(1X,F8.5))') , (wbis(j),j=1,3)
*          write(*,*)'           abis = '
*          write(*,'(3(1X,F8.5))') , (abis(j),j=1,3)
        endif

      END
