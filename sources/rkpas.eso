C D2VPAS    SOURCE    BP208322  20/09/18    21:15:19     10718          
c
      SUBROUTINE RKPAS(Q1,Q2,Q3,NA1,NPC1,XK,XASM,XM,PDT,T,NPAS,
     &   FTOTA,FEXA,NPFEXA,NLIAA,NLSA,IPALA,IPLIA,XPALA,XVALA,
     &   NLIAB,NLSB,NPLB,IDIMB,IPALB,IPLIB,JPLIB,XPALB,XVALB,FTOTB,
     &   FTOTBA,XPTB,FEXPSM,
     &   FINERT,IERRD,FTEST,FTEST2,WEXT,WINT,
     &   XABSCI,XORDON,NIP,FTEXB,FEXB,KTROT,KTPHI,XCHPFB,
     &   XOPM1,NB1,NB1K,NB1C,NB1M)
     
      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)
*--------------------------------------------------------------------*
*                                                                    *
*     Op�rateur DYNE : algorithme des DIFFERENCES CENTREES           *
*     ________________________________________________               *
*                                                                    *
*     Calcul d'un pas de temps, appel aux s-p sp�cifiques.           *
*                                                                    *
*     Param�tres:                                                    *
*                                                                    *
* es  Q1(,)   Vecteur des d�placements g�n�ralis�s                   *
* es  Q2(,)   Vecteur des vitesses g�n�ralis�es                      *
* es  Q3(,)   Vecteur des acc�l�rations g�n�ralis�es                 *
* es  NA1     Nombre total d'inconnues en base A                     *
* es  NPC1    Nombre de pas de calcul - 1                            *
* es  XK      Vecteur des raideurs g�n�ralis�es                      *
* es  XASM    Vecteur des amortissements g�n�ralis�s                 *
* es  XM      Vecteur des masses g�n�ralis�es                        *
* e   PDT     pas de temps courant                                   *
* e   T       temps courant                                          *
* e   NPAS    Num�ro du pas de temps                                 *
* es  FTOTA   Forces ext�rieures totalis�es, sur la base A           *
* es  FEXA    Evolution des forces ext�rieures en base A             *
* e   FTEXB   Evolution des forces ext�rieures en base B             *
* e   FEXB    Forces ext�rieures sur la base B, servant au calcul    *
*             des moments pour les corps rigides.                    *
* e   RIGIDE  Vrai si corps rigide, faux sinon                       *
* es  IFEXA   Num�ro du mode correspondant au point de chargement    *
*             (supprime le 2018-12-14 par bp)                        *
* es  NPFEXA  Nombre de points de chargement                         *
* e   NLIAA   Nombre de liaisons sur la base A                       *
* e   NLSA    Nombre de liaisons A en sortie                         *
* e   IPALA   Tableau renseignant sur le type de liaison (base A)    *
* e   IPLIA   Tableau contenant les num�ros "DYNE" des points        *
* e   XPALA   Tableau contenant les param�tres des liaisons          *
* es  XVALA   Tableau contenant les variables internes de liaison A  *
*     XPHILB  Vecteur des deformees modales                          *
* e   NLIAB   Nombre de liaisons sur la base B                       *
* e   NLSB    Nombre de liaisons base B en sortie                    *
* e   NPLB    Nombre total de points de liaisons (base B)            *
* e   IDIMB   Nombre de directions                                   *
* e   IPALB   Tableau renseignant sur le type de liaison             *
* e   IPLIB   Tableau contenant les numeros "DYNE" des points        *
* e   JPLIB   Tableau contenant les numeros "GIBI" des points        *
* e   XPALB   Tableau contenant les parametres des liaisons (base B) *
* es  XVALB   Tableau contenant les variables internes de liaison B  *
*     FTOTB   Forces exterieures totalisees sur la base B            *
* e   XABSCI  Tableau contenant les abscisses de la loi plastique    *
* e   XORDON  Tableau contenant les ordonnees de la loi plastique    *
* e   NIP     Nbr de points dans l'evolution de la loi plastique     *
*     FTOTBA  Forces totales base B projetees base A                 *
*     XPTB    Deplacements des points de liaison                     *
*     IBASB   Appartenance des points de liaison a une sous-base     *
*     IPLSB   Position du point de liaison dans la sous-base         *
*     INMSB   Nombre de modes dans la sous-base                      *
*     IORSB   Position du 1er mode de la sous-base dans ens. modes   *
*     IAROTA  Indique la position des modes de rotation              *
*     NSB     Nombre de sous-bases                                   *
*     NPLSB   Nombre de points de liaison par sous-base              *
*     NA2     Nombre d'inconnues dans la sous-base                   *
*     FEXPSM  Pseudo-Modes base B                                    *
*     FINERT  Forces d'inertie base B                                *
*     IERRD   Indicateur d'erreur                                    *
* -   FTEST   Tableau local FTEST de la subroutine D2VLFA            *
* -   FTEST2  Tableau local FTEST de la subroutine DEVLB1            *
* e,s WEXT   travail des forces exterieures                          *
* e,s WINT   travail des forces interieures (rigidite et             *
*            amortissement et forces de liaison )                    *
*                                                                    *
*     fmomtot : couple exterieur dans le body frame pour la phase rk4!!
*--------------------------------------------------------------------*
*
-INC CCREEL
*
      SEGMENT,MTPHI
         INTEGER IBASB(NPLB),IPLSB(NPLB),INMSB(NSB),IORSB(NSB)
         INTEGER IAROTA(NSB)
         REAL*8 XPHILB(NSB,NPLSB,NA2,IDIMB)
      ENDSEGMENT
      SEGMENT,MTROT
         REAL*8 OMEG1(4,5,NSB),OMEG2(3,5,NSB),OMEG3(3,5,NSB)
         REAL*8 ROT(3,3,5,NSB),EXPTH(3,3,2,NSB),INERTIE(3,3,NSB)
         REAL*8 XCENT(3,NSB),XCOOLB(3,NSB,NPLB),DTHETA(3,NSB)
         REAL*8 FMOMTOT(3,5,NSB),INVINERT(3,3,NSB),MTSB(NSB)
         REAL*8 UFLEX(NPLB,NSB,3,2),VFLEX(NPLB,NSB,3,2)
         REAL*8 PICIN(NSB,3),TCIN(NSB),EPOT(NSB) 
         INTEGER IBASR(NSB2)
         CHARACTER*4 ITCOMP(NSB2)
         LOGICAL ITRIG(NSB,NA2)
      ENDSEGMENT
      
*
*      INTEGER IFEXA(*),IPALA(NLIAA,*),IPLIA(NLIAA,*)
      INTEGER IPALA(NLIAA,*),IPLIA(NLIAA,*)
      INTEGER IPALB(NLIAB,*),IPLIB(NLIAA,*),JPLIB(*)
      REAL*8 Q1(NA1,*),Q2(NA1,*),Q3(NA1,*)
* Matt: ligne parmetres corps rigide:
      REAL*8 DYN2(3),DQUAT(4)
*
      REAL*8 XVALA(NLIAA,4,*),XPALA(NLIAA,*),XM(NA1,*),XK(NA1,*)
      REAL*8 XPALB(NLIAB,*),XVALB(NLIAB,4,*),FEXPSM(NPLB,NPC1,2,*)
      REAL*8 XASM(NA1,*),FTOTA(NA1,*),FEXA(NPFEXA,NPC1,*)
      REAL*8 FTOTB(NPLB,*),FTOTBA(*),XPTB(NPLB,2,*),FINERT(NA1,*)
      REAL*8 WEXT(NA1,2),WINT(NA1,2)
      REAL*8 XABSCI(NLIAB,*),XORDON(NLIAB,*),FEXB(NPLB,3,*)
      REAL*8 FTEST(NA1,4), FTEST2(NPLB,6)
      REAL*8 FTEXB(NPLB,NPC1,2,*),XCHPFB(2,NLIAB,4,NPLB)
cbp,2020-09      REAL*8 XOPM1(NB1,NB1,*),Q2DEMI(NA1),FAMOR(NA1)
      REAL*8 XOPM1(NB1,NB1,*),FAMOR(NA1)
      
*     TODO : KTOTXA et KTOTVA a allouer dans le segment LOCLFA ?
      REAL*8 KTOTXA(NA1,NA1), KTOTVA(NA1,NA1) 
*     TODO : KTOTXB et KTOTVB a allouer dans le segment LOCLFB ?
      REAL*8 KTOTXB(NPLB,IDIMB,IDIMB),KTOTVB(NPLB,IDIMB,IDIMB) 
*
c     LOGICAL LWRITE
      LOGICAL RIGIDE,lxpinv
      LOGICAL QUATERNION,MATRICE
* CMS : 
      REAL*8 FAMO1(NA1),FAMO2(NA1)
cms : pour le couple resistant "hard code" : 
      real*8 tspin(3)
      logical lrspin
*     vecteurs de rotations incrementaux :
      real*8 th1(3), th2(3), th3(3), th4(3), jw2(3), t2(3)
      real*8 dexpinv(3,3)
*
*      QUATERNION = .FALSE.
       QUATERNION = .TRUE.
*      MATRICE    = .TRUE.
       MATRICE    = .FALSE.
*     resistance au spin ?
      lrspin = .false.
*     correction dexpinv ?
      lxpinv = .false.
*      lxpinv = .true.
*     le cas echeant, base modale de l'adaptateur : 
      ibad = 1

      RIGIDE = (KTROT.NE.0)
      IF (RIGIDE) THEN
        MTROT = KTROT
      ENDIF
      MTPHI  = KTPHI
      NSB = XPHILB(/1)
      NPLSB = XPHILB(/2)
      NA2 =  XPHILB(/3)
*      IF (IIMPI.EQ.555) THEN 
cmsw        WRITE(*,*)'D2VPAS: KTROT = ',KTROT
cmsw        WRITE(*,*)'        RIGIDE = ',RIGIDE
cmsw        WRITE(*,*)'        NSB =',NSB
cmsw        WRITE(*,*)'        IDIMB = ',IDIMB
cmsw        WRITE(*,*)'        NLIAA = ',NLIAA
cmsw        WRITE(*,*)'        NLIAB = ',NLIAB
*      ENDIF
* Calcul de IDIM pour le calcul de l energie cinetique :
      IF (IDIMB.EQ.6) THEN
        IDIM=3
      ELSEIF (IDIMB.EQ.3) THEN
        IDIM=2
      ENDIF
C     Parametres d'affichage (pour debuggage) 
c     LWRITE=.false.
c     LWRITE=(NPAS.LE.20).OR.(MOD(NPAS,1000).EQ.0)
c     if(LWRITE) write(*,*) '-------- NPAS =',NPAS

************************************************************************
*     Parametres temporels locaux
************************************************************************
      tdeb = T
      tfin = T + PDT
      dt   = PDT
      dt2=dt/2.D0
      dt22=dt*dt2

      write(*,*)'rkpas : indice 5 :'
      write(*,*)'        mat. inertie :'
      do id=1,3
         write(*,'(3(1X,F8.5))') , (inertie(id,j,1),j=1,3)
      enddo
      write(*,*)'         omeg1 :'
      WRITE(*,'(3(1X,F8.5))')((omeg1(id,5,isb),id=1,4),isb=1,nsb)
      write(*,*)'         omeg2 :'
      WRITE(*,'(3(1X,F8.5))')((omeg2(id,5,isb),id=1,3),isb=1,nsb)
      write(*,*)'         omeg3 :'
      WRITE(*,'(3(1X,F8.5))')((omeg3(id,5,isb),id=1,3),isb=1,nsb)
************************************************************************
*     remplissage de fexb(ip,1,id) et ftota(i,1) : "les deux extremites du pas de temps"
************************************************************************
*     pas de conditoin sur l'appel a d2vfxa.
      CALL RKFXA(FEXA,FTOTA,NPFEXA,NA1,NPC1,NPAS,FTEXB,FEXB,
     &              NPLB,IDIMB,RIGIDE)
            write(*,*)'rkpas : fexb :'
            write(*,'(3(1X,F8.5))') , ((fexb(ip,3,j),j=1,3),ip=1,nplb)
* ddls elastiques :  
*      do in=1,npfexa 
**        fel(in,3) = ftota(in,2)
**       force au demi-pas de temps :
*        fel(in,2) = fota(in,2) + ((ftota(in,1) - ftota(in,2))/2.d0)
*        fel(in,2) = 
*      enddo
      
************************************************************************
*     todo : ici : l'interpolation des forces exterieures
************************************************************************

************************************************************************
*     Corps rigides: prediction, MAJ matrice de rotation
************************************************************************
* TODO dans D2VINI / DYNE18: initialisation de toutes les ss bases
* pour l'instant, seulement 1 seule ss base inititalisee
     
*      
      IF (RIGIDE) THEN
        NSB = ROT(/4)
        DO 7 IIB=1,NSB
CMS :     Rotas rigides ssi il y a une grande rota ds la ss base en question !!
cmsw          WRITE(*,*)'D2VPAS : IAROTA(',IIB,') = ',IAROTA(IIB)
          IF (IAROTA(IIB).EQ.0) GOTO 7
*         mise a 0 des couples ext. :
          do id=1,3
            fmomtot(id,1,iib) = 0.d0
            fmomtot(id,2,iib) = 0.d0
            fmomtot(id,3,iib) = 0.d0
            fmomtot(id,4,iib) = 0.d0
            fmomtot(id,5,iib) = 0.d0
          enddo
*         th1 correspond au plan tangent en t_n --> on y est deja!
          do id=1,3
            th1(id) = 0.d0
          enddo
************************************************************************
*         k1 = (w1,a1)^T avec :
*           - w1 = omeg2(id,5,iib)
*           - a1 = omeg3(id,5,iib)
************************************************************************
*          u2 = (th2,w2) = y + dt2*k1 : 
************************************************************************
          do id=1,3
            th2(id) = omeg2(id,5,iib) * dt2
            omeg2(id,4,iib)  = omeg2(id,5,iib) + omeg3(id,5,iib) * dt2
          enddo
            write(*,*)'rkpas : 1st pred :'
            write(*,'(3(1X,F8.5))') , (omeg2(j,4,iib),j=1,3)

************************************************************************
*          calcul de EXPTH pour eq. dynamique:
          CALL VECT2QUAT(TH2(1),DQUAT)
*          MAJ quaternion OMEG1:
          CALL PQUAT(OMEG1(1,5,IIB),DQUAT,OMEG1(1,4,IIB))
*          quaternion a l'instant tn+1:
          CALL QUAT2MAT(OMEG1(1,4,IIB),ROT(1,1,4,IIB)) 

            write(*,*)'rkpas : rot 1st pred : indice 4'
         do id=1,3
            write(*,'(3(1X,F8.5))') , (rot(id,j,4,iib),j=1,3)
         enddo
*          equilibre dynamique : 1/2 pdt --> ifex = 3
          call rkpasrig(omeg1,omeg2,omeg3,rot,inertie,invinert,nsb,iib,
     &                  th2,fmomtot,xcoolb,fexb,nplb,4,3,lxpinv)

************************************************************************
*         "rappatriement" sur le plan tangent en t_n de :
*           - du vecteur de rotation thi, i = 1,
*           - du vecteur de rotation
************************************************************************
*         k2 = (w2,a2)^T avec :
*           - w2 = omeg2(id,4,iib)
*           - a2 = omeg3(id,4,iib)
************************************************************************
*          u3 = (th3,w3) = y + dt2*k2 : 
************************************************************************
          do id=1,3
            th3(id) = omeg2(id,4,iib) * dt2
            omeg2(id,3,iib)  = omeg2(id,5,iib) + omeg3(id,4,iib) * dt2
          enddo
************************************************************************
*          calcul de EXPTH pour eq. dynamique:
          CALL VECT2QUAT(TH3(1),DQUAT)
*          MAJ quaternion OMEG1:
          CALL PQUAT(OMEG1(1,5,IIB),DQUAT,OMEG1(1,3,IIB))
*          quaternion a l'instant tn+1:
          CALL QUAT2MAT(OMEG1(1,3,IIB),ROT(1,1,3,IIB)) 
*          equilibre dynamique : 1/2 pdt --> ifex = 3
          call rkpasrig(omeg1,omeg2,omeg3,rot,inertie,invinert,nsb,iib,
     &                  th3,fmomtot,xcoolb,fexb,nplb,3,3,lxpinv)
************************************************************************
*         k3 = (w3,a3)^T avec :
*           - w3 = omeg2(id,3,iib)
*           - a3 = omeg3(id,3,iib)
************************************************************************
*          u4 = (th4,w4) = y + dt*k2 : 
************************************************************************
          do id=1,3
            th4(id) = omeg2(id,3,iib) * dt
            omeg2(id,2,iib)  = omeg2(id,5,iib) + omeg3(id,3,iib) * dt
          enddo
************************************************************************
*          calcul de EXPTH pour eq. dynamique:
          CALL VECT2QUAT(TH4(1),DQUAT)
*          MAJ quaternion OMEG1:
          CALL PQUAT(OMEG1(1,5,IIB),DQUAT,OMEG1(1,2,IIB))
*          quaternion a l'instant tn+1:
          CALL QUAT2MAT(OMEG1(1,2,IIB),ROT(1,1,2,IIB)) 
*          equilibre dynamique : t_n+1 --> ifex = 1
          call rkpasrig(omeg1,omeg2,omeg3,rot,inertie,invinert,nsb,iib,
     &                  th4,fmomtot,xcoolb,fexb,nplb,2,1,lxpinv)
************************************************************************
*         k4 = (w4,a4)^T avec :
*           - w4 = omeg2(id,2,iib)
*           - a4 = omeg3(id,2,iib)
************************************************************************
          do id=1,3
            dtheta(id,iib) = (dt/6.d0)*( omeg2(id,5,iib)
     &                                 + 2.d0*omeg2(id,4,iib)
     &                                 + 2.d0*omeg2(id,3,iib)
     &                                 + omeg2(id,2,iib) )
          enddo
*
          CALL VECT2QUAT(DTHETA(1,IIB),DQUAT)
*          MAJ quaternion OMEG1:
          CALL PQUAT(OMEG1(1,5,IIB),DQUAT,OMEG1(1,1,IIB))
*          quaternion a l'instant tn+1:
          CALL QUAT2MAT(OMEG1(1,1,IIB),ROT(1,1,1,IIB)) 
*         maj des vitesses angulaires :
          do id=1,3
            omeg2(id,1,iib) = omeg2(id,5,iib) +
     &                   (dt/6.d0)*( omeg3(id,5,iib) 
     &                             + 2.d0*omeg3(id,4) 
     &                             + 2.d0*omeg3(id,3) 
     &                             + omeg3(id,2)) 
          enddo
*          equilibre dynamique :
          call rkpasrig(omeg1,omeg2,omeg3,rot,inertie,invinert,nsb,iib,
     &             dtheta(1,iib),fmomtot,xcoolb,fexb,nplb,1,1,.false.)
*          MAJ vitesse angulaire :
          do id = 1,3
            omeg2(id,1,iib) = omeg2(id,5,iib) + 
     &                     (dt/2.d0)*(omeg3(id,1,iib)+omeg3(id,5,iib))
          enddo
******** fin boucle sur les ss bases
 7      continue
      ENDIF
*     fin condition RIGIDE

************************************************************************
*     RK4 : deplacements elastiques 
************************************************************************
*     k1 = (q2(i,5), q3(i,5))^T
*     u2 = y + k1*dt2
************************************************************************
      do i = 1,na1
        q1(i,4) = q1(i,5) + q2(i,5) * dt2
        q2(i,4) = q2(i,5) + q3(i,5) * dt2
      enddo
*     1/2 pdt --> ifex = 3
      call rkpasel(q1,q2,q3,xk,xm,ftota,na1,nb1k,nb1c,nb1,famor,
     &             xasm,xopm1,finert,4,3)
************************************************************************
*     k2 = (q2(i,4), q3(i,4))^T
*     u3 = y + k2*dt2
************************************************************************
      do i = 1,na1
        q1(i,3) = q1(i,5) + q2(i,4) * dt2
        q2(i,3) = q2(i,5) + q3(i,4) * dt2
      enddo
*     1/2 pdt --> ifex = 3
      call rkpasel(q1,q2,q3,xk,xm,ftota,na1,nb1k,nb1c,nb1,famor,
     &             xasm,xopm1,finert,3,3)

************************************************************************
*     k3 = (q2(i,3), q3(i,3))^T
*     u4 = y + k3*dt
************************************************************************
      do i = 1,na1
        q1(i,2) = q1(i,5) + q2(i,3) * dt2
        q2(i,2) = q2(i,5) + q3(i,3) * dt2
      enddo
*     t_n+1 --> ifex = 1
      call rkpasel(q1,q2,q3,xk,xm,ftota,na1,nb1k,nb1c,nb1,famor,
     &             xasm,xopm1,finert,2,1)
************************************************************************
*     k4 = (q2(i,2), q3(i,2))^T
************************************************************************
      do i=1,na1
*       position :
      q1(i,1)=q1(i,2)+(dt/6.d0)*(q2(i,5) + 2.d0*q2(i,4) + 2.d0*q2(i,3) +
     &                       q2(i,2))
*       vitesse :
      q2(i,1)=q2(i,2)+(dt/6.d0)*(q3(i,5) + 2.d0*q3(i,4) + 2.d0*q3(i,3) +
     &                       q3(i,2))
      enddo

      call rkpasel(q1,q2,q3,xk,xm,ftota,na1,nb1k,nb1c,nb1,famor,
     &             xasm,xopm1,finert,1,1)

*     MAJ vitesse generalisee :
      do in=1,na1
        q2(in,1) = q2(in,5) + (dt/2.d0)*(q3(in,1)+q3(in,1))
      enddo

************************************************************************
*     Calcul des forces de liaisons
************************************************************************
*     Totalisation des forces ext�rieures pour la base A a la fin du pas
        CALL D2VFXA(FEXA,FTOTA,NPFEXA,NA1,NPC1,NPAS,FTEXB,FEXB,
     &              NPLB,IDIMB,RIGIDE)
*     Ajout des forces de liaison
      IF (NLIAA.NE.0) THEN
         CALL D2VLFA(Q1,Q2,FTOTA,NA1,IPALA,IPLIA,XPALA,XVALA,
     &               NLIAA,dt,tfin,NPAS,1,FINERT,0,FTEST,
     &               KTOTXA,KTOTVA,.FALSE.)
      ENDIF
      IF (IIMPI.EQ.333) WRITE(IOIMP,*)'D2VPAS: NLIAB = ',NLIAB
      IF (NLIAB.NE.0) THEN
         IF (IIMPI.EQ.333) THEN
cmsw           WRITE(IOIMP,*)'D2VPAS : appel au sous-programme D2VLFB'
         ENDIF      
*        dernier arg = .false. --> calcul du moment au pas t_n+1 via rkmom
         CALL D2VLFB(Q1,Q2,FTOTA,NA1,IPALB,IPLIB,XPALB,XVALB,NLIAB,
     &               XPHILB,JPLIB,NPLB,IDIMB,FTOTB,FTOTBA,XPTB,dt,tfin,
     &               NPAS,IBASB,IPLSB,INMSB,IORSB,NSB,NPLSB,NA2,1,
     &               FEXPSM,NPC1,IERRD,FTEST2,XABSCI,XORDON,NIP,
     &               FEXB,KTROT,IAROTA,XCHPFB,
     &               KTOTXA,KTOTVA,KTOTXB,KTOTVB,.FALSE.,.false.)
*
         IF (IERRD.NE.0) RETURN
      ENDIF
************************************************************************
* ROTATIONS RIGIDES: calcul des matrices necessaires au calcul des forces d'inertie 
*     dans le repere spatial --> on prend le quaternion omeg1 (orientation dans le repere spatial).
******************************************************************
      if (rigide) then
        do iib=1,nsb
* rq : shabana 49 : E = ... , 73 : G = 2E
          E(1,1,iib) = -omeg1(2,iib)
          E(2,1,iib) = -omeg1(3,iib)
          E(3,1,iib) = -omeg1(4,iib)
          E(1,2,iib) = omeg1(1,iib)
          E(1,3,iib) = -omeg1(4,iib)
          E(1,4,iib) = omeg1(3,iib)
          E(2,2,iib) = omeg1(4,iib)
          E(2,3,iib) = omeg1(1,iib)
          E(2,4,iib) = -omeg1(2,iib)
          E(3,2,iib) = -omeg1(3,iib)
          E(3,3,iib) = omeg1(2,iib)
          E(3,4,iib) = omeg1(1,iib)
        enddo
* MRTH :
        do id = 1,na1
          
        enddo
*
      endif
************************************************************************
*     Energies
************************************************************************
      IF (RIGIDE) THEN
       DO 8 IIB=1,NSB
CMS :     Rotas rigides ssi il y a une grande rota ds la ss base en question !!
          IF (IAROTA(IIB).EQ.0) GOTO 8
***       Calcul du moment cinetique : 
          DO I=1,3
            PICIN(IIB,I) = 0.D0
            DO J=1,3
              DYN2(J) = 0.D0
              DO K=1,3
                DYN2(J) = DYN2(J) +
     &                    ROT(I,K,1,IIB)*INERTIE(K,J,IIB)
              ENDDO
              PICIN(NSB,I) = PICIN(IIB,I)+DYN2(J)*OMEG2(J,1,IIB)
            ENDDO
          ENDDO
***       Calcul de l energie cinetique en rotation : 
          TCIN(IIB) = 0.D0
          DO I=1,3
            DYN2(I) = 0.D0
            DO J=1,3
              DYN2(I) = DYN2(I) + INERTIE(I,J,IIB)*OMEG2(J,1,IIB)
            ENDDO
            TCIN(IIB) = TCIN(IIB) + (OMEG2(I,1,IIB)*DYN2(I)/2.d0) 
          ENDDO
          NA3  = INMSB(IIB)
*              = nbr de modes elasiques ds la ss base (incluant les transl. rigides)
          INA2 = IORSB(IIB) - 1
          XTC = 0.D0
          DO IN = 1,NA3
            IN2 = INA2 + IN
            IF ((ITRIG(IIB,IN))) THEN
*             Energie cinetique translation : 
              DO ID=1,IDIM
                XTC = XTC + 
     &            0.5*MTSB(IIB)*((XPHILB(IIB,1,IN,ID)*Q2(IN2,1))**2.d0) 
              ENDDO
            ELSE
*             Energie cinetique modes flexibles : 
              XTC = XTC + (0.5 * (Q2(IN2,2)**2) * XM(IN,1))
            ENDIF 
          ENDDO
          TCIN(IIB) = TCIN(IIB) + XTC
*         Energie potentielle de pesanteur : 
*           - la gravite est en -ez
*           - le cdm du solide est le point de liaison numero 1 
          if (nliab.ne.0) then
            epot(iib) = xptb(1,1,3)*mtsb(iib)*9.81 
          endif
 8     CONTINUE
* fin boucle ss bases
      ENDIF
*
      END

 
 
 
 
