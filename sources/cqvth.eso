      SUBROUTINE cqvth(Q1,q2,KTROT,NA1,IB,ind,na3,ina1) 
*     
      IMPLICIT INTEGER(I-N)
      IMPLICIT REAL*8(A-H,O-Z)
******************************************************************
*     Effet inertiels de la deformation sur le tenseur d'inertie
******************************************************************
*   Consistent mass : shabana p 321 : 
*     qvr = 
*           - chap(W) * I_thth * W  --> Ithth = (J + mthth) pris en compte plus tard
*           - dot(I_thth) * W       --> 1. : calcule ici
*           - chap(W) * (I_thf * dot(q_f)) --> 2 : calcule ici
*
*     I_thth = int_V rho chap(X + u_f)^T * chap(X + u_f) dV
*     I_thf = int_V rho chap(X + u_f) * Phi dV
*
*           Ithth comporte :
*     - une partie statique : le tenseur d'inertie du solide calcule analytiquement. 
*     mthth_stat = J (INERTIE ds mtrot) > De derivee nulle.
*
*     - une partie corrective : calculee dans dans mthth.eso 
*     mthth_corr = - sum_i sum_j m_ij * chap(phi_ij * qf_i)^T * chap(phi_ij * qf_i), i = mode , j = node 
*
*           --> sa derivee vaut : 
* dot(Ithth) = d/dt( m_ij * (chap(phi_ij)^T * chap(phi_ij) ) * q_f^i**2 ) = 
*          m_ij * (chap(phi_ij)^T * chap(phi_ij) ) * 2 * q_f^i * dot(q_f^i)
*
*   Rq  : on ne calcule ici que la derivee de la partie corrective
*   Rq : on saute les translations rigides
******************************************************************

      SEGMENT,MTROT
         REAL*8 OMEG1(4,5,NSB),OMEG2(3,5,NSB),OMEG3(3,5,NSB)
         REAL*8 ROT(3,3,5,NSB),EXPTH(3,3,2,NSB),INERTIE(3,3,NSB)
         REAL*8 XCENT(3,NSB),XCOOLB(3,NSB,NPLB),DTHETA(3,NSB)
         REAL*8 FMOMTOT(3,5,NSB),INVINERT(3,3,NSB),MTSB(NSB)
         REAL*8 UFLEX(NPLB,NSB,3,2),VFLEX(NPLB,NSB,3,2)
         REAL*8 PICIN(NSB,3),TCIN(NSB),EDEF(NSB),XCG(3,NSB)
         REAL*8 XTPHI(3,NPDEF,NA2,NSB),XCOOPHI(3,NPDEF,NSB) 
         REAL*8 XMNO(NA2,NSB),QVTH(3,NSB),QVR(3,NSB),QVF(NA2,NSB)
         REAL*8 MRTH(3,3,NSB),MTHTH(3,3,NSB)
         REAL*8 MFTH(NA2,3,NSB),MFR(NA2,3,NSB),MTOT(NTOT,NTOT,NSB)
         REAL*8 SKL(3,3,NA2,NA2,NSB),IKL(3,3,NA2,NSB)
         REAL*8 BL0(3,NSB),BLF(3,NA2,NSB)
         REAL*8 XMPOI(NPDEF,NSB)
         INTEGER IBASR(NSB2)
         CHARACTER*4 ITCOMP(NSB2)
         LOGICAL ITRIG(NSB,NA2)
      ENDSEGMENT
      
*
      REAL*8 Q1(NA1,*),q2(na1,*)
*      real*8 x1(3),x1cha(3,3),x1cha2(3,3)
*      REAL*8 xco(3),xcocha(3,3)
*      REAL*8 xcof(3,3),xfco(3,3)
      real*8 jw(3),jwf(3),dmth(3,3)
******************************************************************
      mtrot = ktrot
******************************************************************
      npdef = xtphi(/2)
******************************************************************
*     nbr de modes elastiques dans la sous bases :
******************************************************************
*     na3 = inmsb(ib)
*     1er mode elast ou transl rigi de la sous base ib ds l'ensemble des modes elast + trans rigis
*     ina1 = iorsb(ib) - 1


*******************************************************************
*      do ip=1,npdef
*******************************************************************
*        do 1 in = 1,na3
*          if (itrig(ib,in)) goto 1
*          i2 = ina1 + in
*******************************************************************
**     2eme partie : 
**     - dot(I_thth) * W = - 2 * m_ij * (chap(phi_ij)^T * chap(phi_ij) ) * q_f^i * dot(q_f^i) * W
*******************************************************************
*          do id=1,3
*            x1(id) = xtphi(id,ip,in,ib)
*            xco(id) = xcoophi(id,ip,ib) - xcent(id,ib)
*          enddo
*          call chap(x1(1),x1cha(1,1)) 
*          call chap(xco(1),xcocha(1,1))
**         chap(phi_ij)^T * chap(ph_ij) :
*          do id=1,3
*            do j=1,3
*              x1cha2(id,j) = 0.d0
*              xcof(id,j) = 0.d0
*              xfco(id,j) = 0.d0
*              do k=1,3
*                x1cha2(id,j) = x1cha2(id,j) + (x1cha(k,id)*x1cha(k,j))
*                xcof(id,j) = Xcof(id,j) + (xcocha(k,id)*X1cha(k,j))
*                xfco(id,j) = Xfco(id,j) + (x1cha(k,id)*Xcocha(k,j))
*              enddo
*            enddo
*          enddo
**
*          do id=1,3
**           shabana old edition p321 : - d(I_{thth})/dt * W :
*            do j=1,3
*             qvth(id,ib) = qvth(id,ib) - (2.*xmpoi(ip,ib) * 
*     &      (x1cha2(id,j)*q1(i2,ind)*q2(i2,ind))*omeg2(j,ind,ib)) -
*     &      (xmpoi(ip,ib)*(xcof(id,j)+xfco(id,j))*q2(i2,ind)*
*     &         omeg2(j,ind,ib))
**              write(*,*)'xfco+xcof(id,j) = ',(xcof(id,j)+xfco(id,j))
*            enddo
*          enddo
**
* 1      continue
****** fin boucle sur les points 
*      enddo
*******************************************************************
*
*******************************************************************
**       3. : - chap(W) * (I_thf * dot(q_f)) 
*******************************************************************
*      do 2 in=1,na3
*        if (itrig(ib,in)) goto 2
*        i2 = ina1 + in
*      qvth(1,ib) = qvth(1,ib) - 
*     &  (omeg2(3,ind,ib)*(mfth(in,2,ib)*q2(i2,ind)) -
*     &   omeg2(2,ind,ib)*(mfth(in,3,ib)*q2(i2,ind)))
*      qvth(2,ib) = qvth(2,ib) - 
*     &  (omeg2(3,ind,ib)*(mfth(in,1,ib)*q2(i2,ind)) -
*     &   omeg2(1,ind,ib)*(mfth(in,3,ib)*q2(i2,ind)))
*      qvth(3,ib) = qvth(3,ib) - 
*     &  (omeg2(1,ind,ib)*(mfth(in,2,ib)*q2(i2,ind)) -
*     &   omeg2(2,ind,ib)*(mfth(in,1,ib)*q2(i2,ind)))
* 2    continue
*
*******************************************************************
**       1. : - chap(W) * (I_thth * W) , Ithth = (J + mthth) 
*******************************************************************
*      do id=1,3
*        jw(id) = 0.d0 
*        do j=1,3
*          jw(id) = jw(id) + 
*     &    (inertie(id,j,ib)+mthth(id,j,ib))*omeg2(j,ind,ib)
*        enddo
*      enddo
*      qvth(1,ib) = qvth(1,ib) - 
*     &  (omeg2(3,ind,ib)*jw(2) -
*     &   omeg2(2,ind,ib)*jw(3))
*      qvth(2,ib) = qvth(2,ib) - 
*     &  (omeg2(3,ind,ib)*jw(1) -
*     &   omeg2(1,ind,ib)*jw(3))
*      qvth(3,ib) = qvth(3,ib) - 
*     &  (omeg2(1,ind,ib)*jw(2) -
*     &   omeg2(2,ind,ib)*jw(1))
* 

*******************************************************************
*       new : on utilise les matrices macros 
*******************************************************************
*     calcul de -wjw 
      do id=1,3
      jw(id) = 0.d0
      do j=1,3
      jw(id)=jw(id) + ((inertie(id,j,ib)+mthth(id,j,ib))*omeg2(j,1,ib))
      enddo
      enddo
*     
      qvth(1,ib) = qvth(1,ib)-(omeg2(2,1,ib)*jw(3)-omeg2(3,1,ib)*jw(2))
      qvth(2,ib) = qvth(2,ib)-(omeg2(3,1,ib)*jw(1)-omeg2(1,1,ib)*jw(3))
      qvth(3,ib) = qvth(3,ib)-(omeg2(1,1,ib)*jw(2)-omeg2(2,1,ib)*jw(1))
*     caclul de d(mthth)/dt :     
      do id=1,3
        do j=1,3
          dmth(id,j) = 0.d0
        enddo
      enddo
*     partie ikl :
*     termes diagonaux :
      do in=1,na3
        i2 = ina1 + in
        if (.not.itrig(ib,in)) then
        dmth(1,1) = dmth(1,1) + 
     &  (2.d0*q2(i2,1)*(ikl(2,2,in,ib) + ikl(3,3,in,ib)))
        dmth(2,2) = dmth(2,2) + 
     &  (2.d0*q2(i2,1)*(ikl(1,1,in,ib) + ikl(3,3,in,ib)))
        dmth(3,3) = dmth(3,3) + 
     &  (2.d0*q2(i2,1)*(ikl(1,1,in,ib) + ikl(2,2,in,ib)))
        endif
      enddo
*     termes non diagonaux :
      do k=1,3
      do l=1,3
        if (k.ne.l) then
          do in=1,na3
            i2 = ina1 + in
            if (.not.itrig(ib,in)) then
            dmth(k,l) = dmth(k,l) - 
     &                  q2(i2,1)*(ikl(k,l,in,ib)+ikl(l,k,in,ib)) 
            endif
          enddo
        endif
      enddo
      enddo
*     partie skl : partie (f' * g)
      do in=1,na3
        i2 = ina1 + in
        if (.not.itrig(ib,in)) then
        do j=1,na3
          j2 = ina1 + j
          if (.not.itrig(ib,j)) then
          dmth(1,1) = dmth(1,1) + 
     &    (q1(i2,1)*(skl(2,2,in,j,ib) + skl(3,3,in,j,ib))*q2(j2,1))
          dmth(2,2) = dmth(2,2) + 
     &    (q1(i2,1)*(skl(1,1,in,j,ib) + skl(3,3,in,j,ib))*q2(j2,1))
          dmth(3,3) = dmth(3,3) + 
     &    (q1(i2,1)*(skl(1,1,in,j,ib) + skl(2,2,in,j,ib))*q2(j2,1))
          dmth(1,2) = dmth(1,2) - 
     &    (q1(i2,1)*skl(2,1,in,j,ib)*q2(j2,1))
          dmth(1,3) = dmth(1,3) - 
     &    (q1(i2,1)*skl(3,1,in,j,ib)*q2(j2,1))
          dmth(2,3) = dmth(2,3) - 
     &    (q1(i2,1)*skl(3,2,in,j,ib)*q2(j2,1))
          dmth(2,1) = dmth(2,1) - 
     &    (q1(i2,1)*skl(1,2,in,j,ib)*q2(j2,1))
          dmth(3,1) = dmth(3,1) - 
     &    (q1(i2,1)*skl(1,3,in,j,ib)*q2(j2,1))
          dmth(3,2) = dmth(3,2) - 
     &    (q1(i2,1)*skl(2,3,in,j,ib)*q2(j2,1))
          endif
        enddo
        endif
      enddo
*     partie skl : partie (f * g')
      do in=1,na3
        i2 = ina1 + in
        if (.not.itrig(ib,in)) then
        do j=1,na3
          j2 = ina1 + j
          if (.not.itrig(ib,j)) then
          dmth(1,1) = dmth(1,1) + 
     &    (q2(i2,1)*(skl(2,2,in,j,ib) + skl(3,3,in,j,ib))*q1(j2,1))
          dmth(2,2) = dmth(2,2) + 
     &    (q2(i2,1)*(skl(1,1,in,j,ib) + skl(3,3,in,j,ib))*q1(j2,1))
          dmth(3,3) = dmth(3,3) + 
     &    (q2(i2,1)*(skl(1,1,in,j,ib) + skl(2,2,in,j,ib))*q1(j2,1))
          dmth(1,2) = dmth(1,2) - 
     &    (q2(i2,1)*skl(2,1,in,j,ib)*q1(j2,1))
          dmth(1,3) = dmth(1,3) - 
     &    (q2(i2,1)*skl(3,1,in,j,ib)*q1(j2,1))
          dmth(2,3) = dmth(2,3) - 
     &    (q2(i2,1)*skl(3,2,in,j,ib)*q1(j2,1))
          dmth(2,1) = dmth(2,1) - 
     &    (q2(i2,1)*skl(1,2,in,j,ib)*q1(j2,1))
          dmth(3,1) = dmth(3,1) - 
     &    (q2(i2,1)*skl(1,3,in,j,ib)*q1(j2,1))
          dmth(3,2) = dmth(3,2) - 
     &    (q2(i2,1)*skl(2,3,in,j,ib)*q1(j2,1))
          endif
        enddo
        endif
      enddo
**     on remplit les symetriques :
*      dmth(2,1) = dmth(1,2)
*      dmth(3,1) = dmth(1,3)
*      dmth(3,2) = dmth(2,3)
*     on calcul le terme dmth * W :
      do id=1,3
      do j=1,3
        qvth(id,ib)=qvth(id,ib)-(dmth(id,j)*omeg2(j,1,ib)) 
      enddo
      enddo
*     calcul du terme W wedge (mthf*dqf/dt)
*     jwf = mthf * dqf/dt
      do id=1,3
      jwf(id)=0.d0
      do in=1,na3
        if (.not.(itrig(ib,in))) then
          i2=ina1+in
          jwf(id) = jwf(id) + (mfth(in,id,ib)*q2(i2,1))
        endif
      enddo
      enddo
*     
      qvth(1,ib)=qvth(1,ib)-(omeg2(2,1,ib)*jwf(3)-omeg2(3,1,ib)*jwf(2))
      qvth(2,ib)=qvth(2,ib)-(omeg2(3,1,ib)*jwf(1)-omeg2(1,1,ib)*jwf(3))
      qvth(3,ib)=qvth(3,ib)-(omeg2(1,1,ib)*jwf(2)-omeg2(2,1,ib)*jwf(1))
*
*      write(*,*)'QVTH :'
*      write(*,'(3(1X,F15.10))') , (qvth(id,ib),id=1,3)
*
      END